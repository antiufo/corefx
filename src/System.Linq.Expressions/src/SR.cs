// Do not edit this file manually it is auto-generated during the build based on the .resx file for this project.
namespace System
{
    internal static partial class SR
    {
#pragma warning disable 0414
        private const string s_resourcesName = "FxResources.System.Linq.Expressions.SR";
#pragma warning restore 0414

#if !DEBUGRESOURCES
        internal static string ReducibleMustOverrideReduce {
              get { return SR.GetResourceString("ReducibleMustOverrideReduce", null); }
        }
        internal static string MustReduceToDifferent {
              get { return SR.GetResourceString("MustReduceToDifferent", null); }
        }
        internal static string ReducedNotCompatible {
              get { return SR.GetResourceString("ReducedNotCompatible", null); }
        }
        internal static string SetterHasNoParams {
              get { return SR.GetResourceString("SetterHasNoParams", null); }
        }
        internal static string PropertyCannotHaveRefType {
              get { return SR.GetResourceString("PropertyCannotHaveRefType", null); }
        }
        internal static string IndexesOfSetGetMustMatch {
              get { return SR.GetResourceString("IndexesOfSetGetMustMatch", null); }
        }
        internal static string AccessorsCannotHaveVarArgs {
              get { return SR.GetResourceString("AccessorsCannotHaveVarArgs", null); }
        }
        internal static string AccessorsCannotHaveByRefArgs {
              get { return SR.GetResourceString("AccessorsCannotHaveByRefArgs", null); }
        }
        internal static string BoundsCannotBeLessThanOne {
              get { return SR.GetResourceString("BoundsCannotBeLessThanOne", null); }
        }
        internal static string TypeMustNotBeByRef {
              get { return SR.GetResourceString("TypeMustNotBeByRef", null); }
        }
        internal static string TypeDoesNotHaveConstructorForTheSignature {
              get { return SR.GetResourceString("TypeDoesNotHaveConstructorForTheSignature", null); }
        }
        internal static string CountCannotBeNegative {
              get { return SR.GetResourceString("CountCannotBeNegative", null); }
        }
        internal static string ArrayTypeMustBeArray {
              get { return SR.GetResourceString("ArrayTypeMustBeArray", null); }
        }
        internal static string SetterMustBeVoid {
              get { return SR.GetResourceString("SetterMustBeVoid", null); }
        }
        internal static string PropertyTyepMustMatchSetter {
              get { return SR.GetResourceString("PropertyTyepMustMatchSetter", null); }
        }
        internal static string BothAccessorsMustBeStatic {
              get { return SR.GetResourceString("BothAccessorsMustBeStatic", null); }
        }
        internal static string OnlyStaticFieldsHaveNullInstance {
              get { return SR.GetResourceString("OnlyStaticFieldsHaveNullInstance", null); }
        }
        internal static string OnlyStaticPropertiesHaveNullInstance {
              get { return SR.GetResourceString("OnlyStaticPropertiesHaveNullInstance", null); }
        }
        internal static string OnlyStaticMethodsHaveNullInstance {
              get { return SR.GetResourceString("OnlyStaticMethodsHaveNullInstance", null); }
        }
        internal static string PropertyTypeCannotBeVoid {
              get { return SR.GetResourceString("PropertyTypeCannotBeVoid", null); }
        }
        internal static string InvalidUnboxType {
              get { return SR.GetResourceString("InvalidUnboxType", null); }
        }
        internal static string ExpressionMustBeWriteable {
              get { return SR.GetResourceString("ExpressionMustBeWriteable", null); }
        }
        internal static string ArgumentMustNotHaveValueType {
              get { return SR.GetResourceString("ArgumentMustNotHaveValueType", null); }
        }
        internal static string MustBeReducible {
              get { return SR.GetResourceString("MustBeReducible", null); }
        }
        internal static string AllTestValuesMustHaveSameType {
              get { return SR.GetResourceString("AllTestValuesMustHaveSameType", null); }
        }
        internal static string AllCaseBodiesMustHaveSameType {
              get { return SR.GetResourceString("AllCaseBodiesMustHaveSameType", null); }
        }
        internal static string DefaultBodyMustBeSupplied {
              get { return SR.GetResourceString("DefaultBodyMustBeSupplied", null); }
        }
        internal static string MethodBuilderDoesNotHaveTypeBuilder {
              get { return SR.GetResourceString("MethodBuilderDoesNotHaveTypeBuilder", null); }
        }
        internal static string LabelMustBeVoidOrHaveExpression {
              get { return SR.GetResourceString("LabelMustBeVoidOrHaveExpression", null); }
        }
        internal static string LabelTypeMustBeVoid {
              get { return SR.GetResourceString("LabelTypeMustBeVoid", null); }
        }
        internal static string QuotedExpressionMustBeLambda {
              get { return SR.GetResourceString("QuotedExpressionMustBeLambda", null); }
        }
        internal static string VariableMustNotBeByRef {
              get { return SR.GetResourceString("VariableMustNotBeByRef", null); }
        }
        internal static string DuplicateVariable {
              get { return SR.GetResourceString("DuplicateVariable", null); }
        }
        internal static string StartEndMustBeOrdered {
              get { return SR.GetResourceString("StartEndMustBeOrdered", null); }
        }
        internal static string FaultCannotHaveCatchOrFinally {
              get { return SR.GetResourceString("FaultCannotHaveCatchOrFinally", null); }
        }
        internal static string TryMustHaveCatchFinallyOrFault {
              get { return SR.GetResourceString("TryMustHaveCatchFinallyOrFault", null); }
        }
        internal static string BodyOfCatchMustHaveSameTypeAsBodyOfTry {
              get { return SR.GetResourceString("BodyOfCatchMustHaveSameTypeAsBodyOfTry", null); }
        }
        internal static string ExtensionNodeMustOverrideProperty {
              get { return SR.GetResourceString("ExtensionNodeMustOverrideProperty", null); }
        }
        internal static string UserDefinedOperatorMustBeStatic {
              get { return SR.GetResourceString("UserDefinedOperatorMustBeStatic", null); }
        }
        internal static string UserDefinedOperatorMustNotBeVoid {
              get { return SR.GetResourceString("UserDefinedOperatorMustNotBeVoid", null); }
        }
        internal static string CoercionOperatorNotDefined {
              get { return SR.GetResourceString("CoercionOperatorNotDefined", null); }
        }
        internal static string UnaryOperatorNotDefined {
              get { return SR.GetResourceString("UnaryOperatorNotDefined", null); }
        }
        internal static string BinaryOperatorNotDefined {
              get { return SR.GetResourceString("BinaryOperatorNotDefined", null); }
        }
        internal static string ReferenceEqualityNotDefined {
              get { return SR.GetResourceString("ReferenceEqualityNotDefined", null); }
        }
        internal static string OperandTypesDoNotMatchParameters {
              get { return SR.GetResourceString("OperandTypesDoNotMatchParameters", null); }
        }
        internal static string OverloadOperatorTypeDoesNotMatchConversionType {
              get { return SR.GetResourceString("OverloadOperatorTypeDoesNotMatchConversionType", null); }
        }
        internal static string ConversionIsNotSupportedForArithmeticTypes {
              get { return SR.GetResourceString("ConversionIsNotSupportedForArithmeticTypes", null); }
        }
        internal static string ArgumentMustBeArray {
              get { return SR.GetResourceString("ArgumentMustBeArray", null); }
        }
        internal static string ArgumentMustBeBoolean {
              get { return SR.GetResourceString("ArgumentMustBeBoolean", null); }
        }
        internal static string EqualityMustReturnBoolean {
              get { return SR.GetResourceString("EqualityMustReturnBoolean", null); }
        }
        internal static string ArgumentMustBeFieldInfoOrPropertInfo {
              get { return SR.GetResourceString("ArgumentMustBeFieldInfoOrPropertInfo", null); }
        }
        internal static string ArgumentMustBeFieldInfoOrPropertInfoOrMethod {
              get { return SR.GetResourceString("ArgumentMustBeFieldInfoOrPropertInfoOrMethod", null); }
        }
        internal static string ArgumentMustBeInstanceMember {
              get { return SR.GetResourceString("ArgumentMustBeInstanceMember", null); }
        }
        internal static string ArgumentMustBeInteger {
              get { return SR.GetResourceString("ArgumentMustBeInteger", null); }
        }
        internal static string ArgumentMustBeArrayIndexType {
              get { return SR.GetResourceString("ArgumentMustBeArrayIndexType", null); }
        }
        internal static string ArgumentMustBeSingleDimensionalArrayType {
              get { return SR.GetResourceString("ArgumentMustBeSingleDimensionalArrayType", null); }
        }
        internal static string ArgumentTypesMustMatch {
              get { return SR.GetResourceString("ArgumentTypesMustMatch", null); }
        }
        internal static string CannotAutoInitializeValueTypeElementThroughProperty {
              get { return SR.GetResourceString("CannotAutoInitializeValueTypeElementThroughProperty", null); }
        }
        internal static string CannotAutoInitializeValueTypeMemberThroughProperty {
              get { return SR.GetResourceString("CannotAutoInitializeValueTypeMemberThroughProperty", null); }
        }
        internal static string IncorrectTypeForTypeAs {
              get { return SR.GetResourceString("IncorrectTypeForTypeAs", null); }
        }
        internal static string CoalesceUsedOnNonNullType {
              get { return SR.GetResourceString("CoalesceUsedOnNonNullType", null); }
        }
        internal static string ExpressionTypeCannotInitializeArrayType {
              get { return SR.GetResourceString("ExpressionTypeCannotInitializeArrayType", null); }
        }
        internal static string ArgumentTypeDoesNotMatchMember {
              get { return SR.GetResourceString("ArgumentTypeDoesNotMatchMember", null); }
        }
        internal static string ArgumentMemberNotDeclOnType {
              get { return SR.GetResourceString("ArgumentMemberNotDeclOnType", null); }
        }
        internal static string ExpressionTypeDoesNotMatchReturn {
              get { return SR.GetResourceString("ExpressionTypeDoesNotMatchReturn", null); }
        }
        internal static string ExpressionTypeDoesNotMatchAssignment {
              get { return SR.GetResourceString("ExpressionTypeDoesNotMatchAssignment", null); }
        }
        internal static string ExpressionTypeDoesNotMatchLabel {
              get { return SR.GetResourceString("ExpressionTypeDoesNotMatchLabel", null); }
        }
        internal static string ExpressionTypeNotInvocable {
              get { return SR.GetResourceString("ExpressionTypeNotInvocable", null); }
        }
        internal static string FieldNotDefinedForType {
              get { return SR.GetResourceString("FieldNotDefinedForType", null); }
        }
        internal static string InstanceFieldNotDefinedForType {
              get { return SR.GetResourceString("InstanceFieldNotDefinedForType", null); }
        }
        internal static string FieldInfoNotDefinedForType {
              get { return SR.GetResourceString("FieldInfoNotDefinedForType", null); }
        }
        internal static string IncorrectNumberOfIndexes {
              get { return SR.GetResourceString("IncorrectNumberOfIndexes", null); }
        }
        internal static string IncorrectNumberOfLambdaDeclarationParameters {
              get { return SR.GetResourceString("IncorrectNumberOfLambdaDeclarationParameters", null); }
        }
        internal static string IncorrectNumberOfMembersForGivenConstructor {
              get { return SR.GetResourceString("IncorrectNumberOfMembersForGivenConstructor", null); }
        }
        internal static string IncorrectNumberOfArgumentsForMembers {
              get { return SR.GetResourceString("IncorrectNumberOfArgumentsForMembers", null); }
        }
        internal static string LambdaTypeMustBeDerivedFromSystemDelegate {
              get { return SR.GetResourceString("LambdaTypeMustBeDerivedFromSystemDelegate", null); }
        }
        internal static string MemberNotFieldOrProperty {
              get { return SR.GetResourceString("MemberNotFieldOrProperty", null); }
        }
        internal static string MethodContainsGenericParameters {
              get { return SR.GetResourceString("MethodContainsGenericParameters", null); }
        }
        internal static string MethodIsGeneric {
              get { return SR.GetResourceString("MethodIsGeneric", null); }
        }
        internal static string MethodNotPropertyAccessor {
              get { return SR.GetResourceString("MethodNotPropertyAccessor", null); }
        }
        internal static string PropertyDoesNotHaveGetter {
              get { return SR.GetResourceString("PropertyDoesNotHaveGetter", null); }
        }
        internal static string PropertyDoesNotHaveSetter {
              get { return SR.GetResourceString("PropertyDoesNotHaveSetter", null); }
        }
        internal static string PropertyDoesNotHaveAccessor {
              get { return SR.GetResourceString("PropertyDoesNotHaveAccessor", null); }
        }
        internal static string NotAMemberOfType {
              get { return SR.GetResourceString("NotAMemberOfType", null); }
        }
        internal static string ExpressionNotSupportedForType {
              get { return SR.GetResourceString("ExpressionNotSupportedForType", null); }
        }
        internal static string ExpressionNotSupportedForNullableType {
              get { return SR.GetResourceString("ExpressionNotSupportedForNullableType", null); }
        }
        internal static string UnsupportedExpressionType {
              get { return SR.GetResourceString("UnsupportedExpressionType", null); }
        }
        internal static string FilterBlockNotSupported {
              get { return SR.GetResourceString("FilterBlockNotSupported", null); }
        }
        internal static string FaultBlockNotSupported {
              get { return SR.GetResourceString("FaultBlockNotSupported", null); }
        }
        internal static string NonReducibleExpressionExtensionsNotSupported {
              get { return SR.GetResourceString("NonReducibleExpressionExtensionsNotSupported", null); }
        }
        internal static string ParameterExpressionNotValidAsDelegate {
              get { return SR.GetResourceString("ParameterExpressionNotValidAsDelegate", null); }
        }
        internal static string PropertyNotDefinedForType {
              get { return SR.GetResourceString("PropertyNotDefinedForType", null); }
        }
        internal static string InstancePropertyNotDefinedForType {
              get { return SR.GetResourceString("InstancePropertyNotDefinedForType", null); }
        }
        internal static string InstancePropertyWithoutParameterNotDefinedForType {
              get { return SR.GetResourceString("InstancePropertyWithoutParameterNotDefinedForType", null); }
        }
        internal static string InstancePropertyWithSpecifiedParametersNotDefinedForType {
              get { return SR.GetResourceString("InstancePropertyWithSpecifiedParametersNotDefinedForType", null); }
        }
        internal static string InstanceAndMethodTypeMismatch {
              get { return SR.GetResourceString("InstanceAndMethodTypeMismatch", null); }
        }
        internal static string TypeContainsGenericParameters {
              get { return SR.GetResourceString("TypeContainsGenericParameters", null); }
        }
        internal static string TypeIsGeneric {
              get { return SR.GetResourceString("TypeIsGeneric", null); }
        }
        internal static string TypeMissingDefaultConstructor {
              get { return SR.GetResourceString("TypeMissingDefaultConstructor", null); }
        }
        internal static string ListInitializerWithZeroMembers {
              get { return SR.GetResourceString("ListInitializerWithZeroMembers", null); }
        }
        internal static string ElementInitializerMethodNotAdd {
              get { return SR.GetResourceString("ElementInitializerMethodNotAdd", null); }
        }
        internal static string ElementInitializerMethodNoRefOutParam {
              get { return SR.GetResourceString("ElementInitializerMethodNoRefOutParam", null); }
        }
        internal static string ElementInitializerMethodWithZeroArgs {
              get { return SR.GetResourceString("ElementInitializerMethodWithZeroArgs", null); }
        }
        internal static string ElementInitializerMethodStatic {
              get { return SR.GetResourceString("ElementInitializerMethodStatic", null); }
        }
        internal static string TypeNotIEnumerable {
              get { return SR.GetResourceString("TypeNotIEnumerable", null); }
        }
        internal static string UnexpectedCoalesceOperator {
              get { return SR.GetResourceString("UnexpectedCoalesceOperator", null); }
        }
        internal static string InvalidCast {
              get { return SR.GetResourceString("InvalidCast", null); }
        }
        internal static string UnhandledBinary {
              get { return SR.GetResourceString("UnhandledBinary", null); }
        }
        internal static string UnhandledBinding {
              get { return SR.GetResourceString("UnhandledBinding", null); }
        }
        internal static string UnhandledBindingType {
              get { return SR.GetResourceString("UnhandledBindingType", null); }
        }
        internal static string UnhandledConvert {
              get { return SR.GetResourceString("UnhandledConvert", null); }
        }
        internal static string UnhandledExpressionType {
              get { return SR.GetResourceString("UnhandledExpressionType", null); }
        }
        internal static string UnhandledUnary {
              get { return SR.GetResourceString("UnhandledUnary", null); }
        }
        internal static string UnknownBindingType {
              get { return SR.GetResourceString("UnknownBindingType", null); }
        }
        internal static string UserDefinedOpMustHaveConsistentTypes {
              get { return SR.GetResourceString("UserDefinedOpMustHaveConsistentTypes", null); }
        }
        internal static string UserDefinedOpMustHaveValidReturnType {
              get { return SR.GetResourceString("UserDefinedOpMustHaveValidReturnType", null); }
        }
        internal static string LogicalOperatorMustHaveBooleanOperators {
              get { return SR.GetResourceString("LogicalOperatorMustHaveBooleanOperators", null); }
        }
        internal static string MethodDoesNotExistOnType {
              get { return SR.GetResourceString("MethodDoesNotExistOnType", null); }
        }
        internal static string MethodWithArgsDoesNotExistOnType {
              get { return SR.GetResourceString("MethodWithArgsDoesNotExistOnType", null); }
        }
        internal static string GenericMethodWithArgsDoesNotExistOnType {
              get { return SR.GetResourceString("GenericMethodWithArgsDoesNotExistOnType", null); }
        }
        internal static string MethodWithMoreThanOneMatch {
              get { return SR.GetResourceString("MethodWithMoreThanOneMatch", null); }
        }
        internal static string PropertyWithMoreThanOneMatch {
              get { return SR.GetResourceString("PropertyWithMoreThanOneMatch", null); }
        }
        internal static string IncorrectNumberOfTypeArgsForFunc {
              get { return SR.GetResourceString("IncorrectNumberOfTypeArgsForFunc", null); }
        }
        internal static string IncorrectNumberOfTypeArgsForAction {
              get { return SR.GetResourceString("IncorrectNumberOfTypeArgsForAction", null); }
        }
        internal static string ArgumentCannotBeOfTypeVoid {
              get { return SR.GetResourceString("ArgumentCannotBeOfTypeVoid", null); }
        }
        internal static string InvalidOperation {
              get { return SR.GetResourceString("InvalidOperation", null); }
        }
        internal static string OutOfRange {
              get { return SR.GetResourceString("OutOfRange", null); }
        }
        internal static string QueueEmpty {
              get { return SR.GetResourceString("QueueEmpty", null); }
        }
        internal static string LabelTargetAlreadyDefined {
              get { return SR.GetResourceString("LabelTargetAlreadyDefined", null); }
        }
        internal static string LabelTargetUndefined {
              get { return SR.GetResourceString("LabelTargetUndefined", null); }
        }
        internal static string ControlCannotLeaveFinally {
              get { return SR.GetResourceString("ControlCannotLeaveFinally", null); }
        }
        internal static string ControlCannotLeaveFilterTest {
              get { return SR.GetResourceString("ControlCannotLeaveFilterTest", null); }
        }
        internal static string AmbiguousJump {
              get { return SR.GetResourceString("AmbiguousJump", null); }
        }
        internal static string ControlCannotEnterTry {
              get { return SR.GetResourceString("ControlCannotEnterTry", null); }
        }
        internal static string ControlCannotEnterExpression {
              get { return SR.GetResourceString("ControlCannotEnterExpression", null); }
        }
        internal static string NonLocalJumpWithValue {
              get { return SR.GetResourceString("NonLocalJumpWithValue", null); }
        }
        internal static string ExtensionNotReduced {
              get { return SR.GetResourceString("ExtensionNotReduced", null); }
        }
        internal static string CannotCompileConstant {
              get { return SR.GetResourceString("CannotCompileConstant", null); }
        }
        internal static string CannotCompileDynamic {
              get { return SR.GetResourceString("CannotCompileDynamic", null); }
        }
        internal static string InvalidLvalue {
              get { return SR.GetResourceString("InvalidLvalue", null); }
        }
        internal static string InvalidMemberType {
              get { return SR.GetResourceString("InvalidMemberType", null); }
        }
        internal static string UnknownLiftType {
              get { return SR.GetResourceString("UnknownLiftType", null); }
        }
        internal static string InvalidOutputDir {
              get { return SR.GetResourceString("InvalidOutputDir", null); }
        }
        internal static string InvalidAsmNameOrExtension {
              get { return SR.GetResourceString("InvalidAsmNameOrExtension", null); }
        }
        internal static string IllegalNewGenericParams {
              get { return SR.GetResourceString("IllegalNewGenericParams", null); }
        }
        internal static string UndefinedVariable {
              get { return SR.GetResourceString("UndefinedVariable", null); }
        }
        internal static string CannotCloseOverByRef {
              get { return SR.GetResourceString("CannotCloseOverByRef", null); }
        }
        internal static string UnexpectedVarArgsCall {
              get { return SR.GetResourceString("UnexpectedVarArgsCall", null); }
        }
        internal static string RethrowRequiresCatch {
              get { return SR.GetResourceString("RethrowRequiresCatch", null); }
        }
        internal static string TryNotAllowedInFilter {
              get { return SR.GetResourceString("TryNotAllowedInFilter", null); }
        }
        internal static string MustRewriteToSameNode {
              get { return SR.GetResourceString("MustRewriteToSameNode", null); }
        }
        internal static string MustRewriteChildToSameType {
              get { return SR.GetResourceString("MustRewriteChildToSameType", null); }
        }
        internal static string MustRewriteWithoutMethod {
              get { return SR.GetResourceString("MustRewriteWithoutMethod", null); }
        }
        internal static string InvalidNullValue {
              get { return SR.GetResourceString("InvalidNullValue", null); }
        }
        internal static string InvalidObjectType {
              get { return SR.GetResourceString("InvalidObjectType", null); }
        }
        internal static string TryNotSupportedForMethodsWithRefArgs {
              get { return SR.GetResourceString("TryNotSupportedForMethodsWithRefArgs", null); }
        }
        internal static string TryNotSupportedForValueTypeInstances {
              get { return SR.GetResourceString("TryNotSupportedForValueTypeInstances", null); }
        }
        internal static string EnumerationIsDone {
              get { return SR.GetResourceString("EnumerationIsDone", null); }
        }
        internal static string HomogenousAppDomainRequired {
              get { return SR.GetResourceString("HomogenousAppDomainRequired", null); }
        }
        internal static string TestValueTypeDoesNotMatchComparisonMethodParameter {
              get { return SR.GetResourceString("TestValueTypeDoesNotMatchComparisonMethodParameter", null); }
        }
        internal static string SwitchValueTypeDoesNotMatchComparisonMethodParameter {
              get { return SR.GetResourceString("SwitchValueTypeDoesNotMatchComparisonMethodParameter", null); }
        }
        internal static string PdbGeneratorNeedsExpressionCompiler {
              get { return SR.GetResourceString("PdbGeneratorNeedsExpressionCompiler", null); }
        }
        internal static string InvalidArgumentValue {
              get { return SR.GetResourceString("InvalidArgumentValue", null); }
        }
        internal static string NonEmptyCollectionRequired {
              get { return SR.GetResourceString("NonEmptyCollectionRequired", null); }
        }
        internal static string CollectionModifiedWhileEnumerating {
              get { return SR.GetResourceString("CollectionModifiedWhileEnumerating", null); }
        }
        internal static string ExpressionMustBeReadable {
              get { return SR.GetResourceString("ExpressionMustBeReadable", null); }
        }
        internal static string ExpressionTypeDoesNotMatchMethodParameter {
              get { return SR.GetResourceString("ExpressionTypeDoesNotMatchMethodParameter", null); }
        }
        internal static string ExpressionTypeDoesNotMatchParameter {
              get { return SR.GetResourceString("ExpressionTypeDoesNotMatchParameter", null); }
        }
        internal static string ExpressionTypeDoesNotMatchConstructorParameter {
              get { return SR.GetResourceString("ExpressionTypeDoesNotMatchConstructorParameter", null); }
        }
        internal static string IncorrectNumberOfMethodCallArguments {
              get { return SR.GetResourceString("IncorrectNumberOfMethodCallArguments", null); }
        }
        internal static string IncorrectNumberOfLambdaArguments {
              get { return SR.GetResourceString("IncorrectNumberOfLambdaArguments", null); }
        }
        internal static string IncorrectNumberOfConstructorArguments {
              get { return SR.GetResourceString("IncorrectNumberOfConstructorArguments", null); }
        }
        internal static string OperatorNotImplementedForType {
              get { return SR.GetResourceString("OperatorNotImplementedForType", null); }
        }
#else
        internal static string ReducibleMustOverrideReduce {
              get { return SR.GetResourceString("ReducibleMustOverrideReduce", @"reducible nodes must override Expression.Reduce()"); }
        }
        internal static string MustReduceToDifferent {
              get { return SR.GetResourceString("MustReduceToDifferent", @"node cannot reduce to itself or null"); }
        }
        internal static string ReducedNotCompatible {
              get { return SR.GetResourceString("ReducedNotCompatible", @"cannot assign from the reduced node type to the original node type"); }
        }
        internal static string SetterHasNoParams {
              get { return SR.GetResourceString("SetterHasNoParams", @"Setter must have parameters."); }
        }
        internal static string PropertyCannotHaveRefType {
              get { return SR.GetResourceString("PropertyCannotHaveRefType", @"Property cannot have a managed pointer type."); }
        }
        internal static string IndexesOfSetGetMustMatch {
              get { return SR.GetResourceString("IndexesOfSetGetMustMatch", @"Indexing parameters of getter and setter must match."); }
        }
        internal static string AccessorsCannotHaveVarArgs {
              get { return SR.GetResourceString("AccessorsCannotHaveVarArgs", @"Accessor method should not have VarArgs."); }
        }
        internal static string AccessorsCannotHaveByRefArgs {
              get { return SR.GetResourceString("AccessorsCannotHaveByRefArgs", @"Accessor indexes cannot be passed ByRef."); }
        }
        internal static string BoundsCannotBeLessThanOne {
              get { return SR.GetResourceString("BoundsCannotBeLessThanOne", @"Bounds count cannot be less than 1"); }
        }
        internal static string TypeMustNotBeByRef {
              get { return SR.GetResourceString("TypeMustNotBeByRef", @"type must not be ByRef"); }
        }
        internal static string TypeDoesNotHaveConstructorForTheSignature {
              get { return SR.GetResourceString("TypeDoesNotHaveConstructorForTheSignature", @"Type doesn't have constructor with a given signature"); }
        }
        internal static string CountCannotBeNegative {
              get { return SR.GetResourceString("CountCannotBeNegative", @"Count must be non-negative."); }
        }
        internal static string ArrayTypeMustBeArray {
              get { return SR.GetResourceString("ArrayTypeMustBeArray", @"arrayType must be an array type"); }
        }
        internal static string SetterMustBeVoid {
              get { return SR.GetResourceString("SetterMustBeVoid", @"Setter should have void type."); }
        }
        internal static string PropertyTyepMustMatchSetter {
              get { return SR.GetResourceString("PropertyTyepMustMatchSetter", @"Property type must match the value type of setter"); }
        }
        internal static string BothAccessorsMustBeStatic {
              get { return SR.GetResourceString("BothAccessorsMustBeStatic", @"Both accessors must be static."); }
        }
        internal static string OnlyStaticFieldsHaveNullInstance {
              get { return SR.GetResourceString("OnlyStaticFieldsHaveNullInstance", @"Static field requires null instance, non-static field requires non-null instance."); }
        }
        internal static string OnlyStaticPropertiesHaveNullInstance {
              get { return SR.GetResourceString("OnlyStaticPropertiesHaveNullInstance", @"Static property requires null instance, non-static property requires non-null instance."); }
        }
        internal static string OnlyStaticMethodsHaveNullInstance {
              get { return SR.GetResourceString("OnlyStaticMethodsHaveNullInstance", @"Static method requires null instance, non-static method requires non-null instance."); }
        }
        internal static string PropertyTypeCannotBeVoid {
              get { return SR.GetResourceString("PropertyTypeCannotBeVoid", @"Property cannot have a void type."); }
        }
        internal static string InvalidUnboxType {
              get { return SR.GetResourceString("InvalidUnboxType", @"Can only unbox from an object or interface type to a value type."); }
        }
        internal static string ExpressionMustBeWriteable {
              get { return SR.GetResourceString("ExpressionMustBeWriteable", @"Expression must be writeable"); }
        }
        internal static string ArgumentMustNotHaveValueType {
              get { return SR.GetResourceString("ArgumentMustNotHaveValueType", @"Argument must not have a value type."); }
        }
        internal static string MustBeReducible {
              get { return SR.GetResourceString("MustBeReducible", @"must be reducible node"); }
        }
        internal static string AllTestValuesMustHaveSameType {
              get { return SR.GetResourceString("AllTestValuesMustHaveSameType", @"All test values must have the same type."); }
        }
        internal static string AllCaseBodiesMustHaveSameType {
              get { return SR.GetResourceString("AllCaseBodiesMustHaveSameType", @"All case bodies and the default body must have the same type."); }
        }
        internal static string DefaultBodyMustBeSupplied {
              get { return SR.GetResourceString("DefaultBodyMustBeSupplied", @"Default body must be supplied if case bodies are not System.Void."); }
        }
        internal static string MethodBuilderDoesNotHaveTypeBuilder {
              get { return SR.GetResourceString("MethodBuilderDoesNotHaveTypeBuilder", @"MethodBuilder does not have a valid TypeBuilder"); }
        }
        internal static string LabelMustBeVoidOrHaveExpression {
              get { return SR.GetResourceString("LabelMustBeVoidOrHaveExpression", @"Label type must be System.Void if an expression is not supplied"); }
        }
        internal static string LabelTypeMustBeVoid {
              get { return SR.GetResourceString("LabelTypeMustBeVoid", @"Type must be System.Void for this label argument"); }
        }
        internal static string QuotedExpressionMustBeLambda {
              get { return SR.GetResourceString("QuotedExpressionMustBeLambda", @"Quoted expression must be a lambda"); }
        }
        internal static string VariableMustNotBeByRef {
              get { return SR.GetResourceString("VariableMustNotBeByRef", @"Variable '{0}' uses unsupported type '{1}'. Reference types are not supported for variables."); }
        }
        internal static string DuplicateVariable {
              get { return SR.GetResourceString("DuplicateVariable", @"Found duplicate parameter '{0}'. Each ParameterExpression in the list must be a unique object."); }
        }
        internal static string StartEndMustBeOrdered {
              get { return SR.GetResourceString("StartEndMustBeOrdered", @"Start and End must be well ordered"); }
        }
        internal static string FaultCannotHaveCatchOrFinally {
              get { return SR.GetResourceString("FaultCannotHaveCatchOrFinally", @"fault cannot be used with catch or finally clauses"); }
        }
        internal static string TryMustHaveCatchFinallyOrFault {
              get { return SR.GetResourceString("TryMustHaveCatchFinallyOrFault", @"try must have at least one catch, finally, or fault clause"); }
        }
        internal static string BodyOfCatchMustHaveSameTypeAsBodyOfTry {
              get { return SR.GetResourceString("BodyOfCatchMustHaveSameTypeAsBodyOfTry", @"Body of catch must have the same type as body of try."); }
        }
        internal static string ExtensionNodeMustOverrideProperty {
              get { return SR.GetResourceString("ExtensionNodeMustOverrideProperty", @"Extension node must override the property {0}."); }
        }
        internal static string UserDefinedOperatorMustBeStatic {
              get { return SR.GetResourceString("UserDefinedOperatorMustBeStatic", @"User-defined operator method '{0}' must be static."); }
        }
        internal static string UserDefinedOperatorMustNotBeVoid {
              get { return SR.GetResourceString("UserDefinedOperatorMustNotBeVoid", @"User-defined operator method '{0}' must not be void."); }
        }
        internal static string CoercionOperatorNotDefined {
              get { return SR.GetResourceString("CoercionOperatorNotDefined", @"No coercion operator is defined between types '{0}' and '{1}'."); }
        }
        internal static string UnaryOperatorNotDefined {
              get { return SR.GetResourceString("UnaryOperatorNotDefined", @"The unary operator {0} is not defined for the type '{1}'."); }
        }
        internal static string BinaryOperatorNotDefined {
              get { return SR.GetResourceString("BinaryOperatorNotDefined", @"The binary operator {0} is not defined for the types '{1}' and '{2}'."); }
        }
        internal static string ReferenceEqualityNotDefined {
              get { return SR.GetResourceString("ReferenceEqualityNotDefined", @"Reference equality is not defined for the types '{0}' and '{1}'."); }
        }
        internal static string OperandTypesDoNotMatchParameters {
              get { return SR.GetResourceString("OperandTypesDoNotMatchParameters", @"The operands for operator '{0}' do not match the parameters of method '{1}'."); }
        }
        internal static string OverloadOperatorTypeDoesNotMatchConversionType {
              get { return SR.GetResourceString("OverloadOperatorTypeDoesNotMatchConversionType", @"The return type of overload method for operator '{0}' does not match the parameter type of conversion method '{1}'."); }
        }
        internal static string ConversionIsNotSupportedForArithmeticTypes {
              get { return SR.GetResourceString("ConversionIsNotSupportedForArithmeticTypes", @"Conversion is not supported for arithmetic types without operator overloading."); }
        }
        internal static string ArgumentMustBeArray {
              get { return SR.GetResourceString("ArgumentMustBeArray", @"Argument must be array"); }
        }
        internal static string ArgumentMustBeBoolean {
              get { return SR.GetResourceString("ArgumentMustBeBoolean", @"Argument must be boolean"); }
        }
        internal static string EqualityMustReturnBoolean {
              get { return SR.GetResourceString("EqualityMustReturnBoolean", @"The user-defined equality method '{0}' must return a boolean value."); }
        }
        internal static string ArgumentMustBeFieldInfoOrPropertInfo {
              get { return SR.GetResourceString("ArgumentMustBeFieldInfoOrPropertInfo", @"Argument must be either a FieldInfo or PropertyInfo"); }
        }
        internal static string ArgumentMustBeFieldInfoOrPropertInfoOrMethod {
              get { return SR.GetResourceString("ArgumentMustBeFieldInfoOrPropertInfoOrMethod", @"Argument must be either a FieldInfo, PropertyInfo or MethodInfo"); }
        }
        internal static string ArgumentMustBeInstanceMember {
              get { return SR.GetResourceString("ArgumentMustBeInstanceMember", @"Argument must be an instance member"); }
        }
        internal static string ArgumentMustBeInteger {
              get { return SR.GetResourceString("ArgumentMustBeInteger", @"Argument must be of an integer type"); }
        }
        internal static string ArgumentMustBeArrayIndexType {
              get { return SR.GetResourceString("ArgumentMustBeArrayIndexType", @"Argument for array index must be of type Int32"); }
        }
        internal static string ArgumentMustBeSingleDimensionalArrayType {
              get { return SR.GetResourceString("ArgumentMustBeSingleDimensionalArrayType", @"Argument must be single dimensional array type"); }
        }
        internal static string ArgumentTypesMustMatch {
              get { return SR.GetResourceString("ArgumentTypesMustMatch", @"Argument types do not match"); }
        }
        internal static string CannotAutoInitializeValueTypeElementThroughProperty {
              get { return SR.GetResourceString("CannotAutoInitializeValueTypeElementThroughProperty", @"Cannot auto initialize elements of value type through property '{0}', use assignment instead"); }
        }
        internal static string CannotAutoInitializeValueTypeMemberThroughProperty {
              get { return SR.GetResourceString("CannotAutoInitializeValueTypeMemberThroughProperty", @"Cannot auto initialize members of value type through property '{0}', use assignment instead"); }
        }
        internal static string IncorrectTypeForTypeAs {
              get { return SR.GetResourceString("IncorrectTypeForTypeAs", @"The type used in TypeAs Expression must be of reference or nullable type, {0} is neither"); }
        }
        internal static string CoalesceUsedOnNonNullType {
              get { return SR.GetResourceString("CoalesceUsedOnNonNullType", @"Coalesce used with type that cannot be null"); }
        }
        internal static string ExpressionTypeCannotInitializeArrayType {
              get { return SR.GetResourceString("ExpressionTypeCannotInitializeArrayType", @"An expression of type '{0}' cannot be used to initialize an array of type '{1}'"); }
        }
        internal static string ArgumentTypeDoesNotMatchMember {
              get { return SR.GetResourceString("ArgumentTypeDoesNotMatchMember", @" Argument type '{0}' does not match the corresponding member type '{1}'"); }
        }
        internal static string ArgumentMemberNotDeclOnType {
              get { return SR.GetResourceString("ArgumentMemberNotDeclOnType", @" The member '{0}' is not declared on type '{1}' being created"); }
        }
        internal static string ExpressionTypeDoesNotMatchReturn {
              get { return SR.GetResourceString("ExpressionTypeDoesNotMatchReturn", @"Expression of type '{0}' cannot be used for return type '{1}'"); }
        }
        internal static string ExpressionTypeDoesNotMatchAssignment {
              get { return SR.GetResourceString("ExpressionTypeDoesNotMatchAssignment", @"Expression of type '{0}' cannot be used for assignment to type '{1}'"); }
        }
        internal static string ExpressionTypeDoesNotMatchLabel {
              get { return SR.GetResourceString("ExpressionTypeDoesNotMatchLabel", @"Expression of type '{0}' cannot be used for label of type '{1}'"); }
        }
        internal static string ExpressionTypeNotInvocable {
              get { return SR.GetResourceString("ExpressionTypeNotInvocable", @"Expression of type '{0}' cannot be invoked"); }
        }
        internal static string FieldNotDefinedForType {
              get { return SR.GetResourceString("FieldNotDefinedForType", @"Field '{0}' is not defined for type '{1}'"); }
        }
        internal static string InstanceFieldNotDefinedForType {
              get { return SR.GetResourceString("InstanceFieldNotDefinedForType", @"Instance field '{0}' is not defined for type '{1}'"); }
        }
        internal static string FieldInfoNotDefinedForType {
              get { return SR.GetResourceString("FieldInfoNotDefinedForType", @"Field '{0}.{1}' is not defined for type '{2}'"); }
        }
        internal static string IncorrectNumberOfIndexes {
              get { return SR.GetResourceString("IncorrectNumberOfIndexes", @"Incorrect number of indexes"); }
        }
        internal static string IncorrectNumberOfLambdaDeclarationParameters {
              get { return SR.GetResourceString("IncorrectNumberOfLambdaDeclarationParameters", @"Incorrect number of parameters supplied for lambda declaration"); }
        }
        internal static string IncorrectNumberOfMembersForGivenConstructor {
              get { return SR.GetResourceString("IncorrectNumberOfMembersForGivenConstructor", @" Incorrect number of members for constructor"); }
        }
        internal static string IncorrectNumberOfArgumentsForMembers {
              get { return SR.GetResourceString("IncorrectNumberOfArgumentsForMembers", @"Incorrect number of arguments for the given members "); }
        }
        internal static string LambdaTypeMustBeDerivedFromSystemDelegate {
              get { return SR.GetResourceString("LambdaTypeMustBeDerivedFromSystemDelegate", @"Lambda type parameter must be derived from System.Delegate"); }
        }
        internal static string MemberNotFieldOrProperty {
              get { return SR.GetResourceString("MemberNotFieldOrProperty", @"Member '{0}' not field or property"); }
        }
        internal static string MethodContainsGenericParameters {
              get { return SR.GetResourceString("MethodContainsGenericParameters", @"Method {0} contains generic parameters"); }
        }
        internal static string MethodIsGeneric {
              get { return SR.GetResourceString("MethodIsGeneric", @"Method {0} is a generic method definition"); }
        }
        internal static string MethodNotPropertyAccessor {
              get { return SR.GetResourceString("MethodNotPropertyAccessor", @"The method '{0}.{1}' is not a property accessor"); }
        }
        internal static string PropertyDoesNotHaveGetter {
              get { return SR.GetResourceString("PropertyDoesNotHaveGetter", @"The property '{0}' has no 'get' accessor"); }
        }
        internal static string PropertyDoesNotHaveSetter {
              get { return SR.GetResourceString("PropertyDoesNotHaveSetter", @"The property '{0}' has no 'set' accessor"); }
        }
        internal static string PropertyDoesNotHaveAccessor {
              get { return SR.GetResourceString("PropertyDoesNotHaveAccessor", @"The property '{0}' has no 'get' or 'set' accessors"); }
        }
        internal static string NotAMemberOfType {
              get { return SR.GetResourceString("NotAMemberOfType", @"'{0}' is not a member of type '{1}'"); }
        }
        internal static string ExpressionNotSupportedForType {
              get { return SR.GetResourceString("ExpressionNotSupportedForType", @"The expression '{0}' is not supported for type '{1}'"); }
        }
        internal static string ExpressionNotSupportedForNullableType {
              get { return SR.GetResourceString("ExpressionNotSupportedForNullableType", @"The expression '{0}' is not supported for nullable type '{1}'"); }
        }
        internal static string UnsupportedExpressionType {
              get { return SR.GetResourceString("UnsupportedExpressionType", @"The expression type '{0}' is not supported"); }
        }
        internal static string FilterBlockNotSupported {
              get { return SR.GetResourceString("FilterBlockNotSupported", @"Filter blocks are not supported"); }
        }
        internal static string FaultBlockNotSupported {
              get { return SR.GetResourceString("FaultBlockNotSupported", @"Fault blocks are not supported"); }
        }
        internal static string NonReducibleExpressionExtensionsNotSupported {
              get { return SR.GetResourceString("NonReducibleExpressionExtensionsNotSupported", @"Non-reducible expression extensions are not supported"); }
        }
        internal static string ParameterExpressionNotValidAsDelegate {
              get { return SR.GetResourceString("ParameterExpressionNotValidAsDelegate", @"ParameterExpression of type '{0}' cannot be used for delegate parameter of type '{1}'"); }
        }
        internal static string PropertyNotDefinedForType {
              get { return SR.GetResourceString("PropertyNotDefinedForType", @"Property '{0}' is not defined for type '{1}'"); }
        }
        internal static string InstancePropertyNotDefinedForType {
              get { return SR.GetResourceString("InstancePropertyNotDefinedForType", @"Instance property '{0}' is not defined for type '{1}'"); }
        }
        internal static string InstancePropertyWithoutParameterNotDefinedForType {
              get { return SR.GetResourceString("InstancePropertyWithoutParameterNotDefinedForType", @"Instance property '{0}' that takes no argument is not defined for type '{1}'"); }
        }
        internal static string InstancePropertyWithSpecifiedParametersNotDefinedForType {
              get { return SR.GetResourceString("InstancePropertyWithSpecifiedParametersNotDefinedForType", @"Instance property '{0}{1}' is not defined for type '{2}'"); }
        }
        internal static string InstanceAndMethodTypeMismatch {
              get { return SR.GetResourceString("InstanceAndMethodTypeMismatch", @"Method '{0}' declared on type '{1}' cannot be called with instance of type '{2}'"); }
        }
        internal static string TypeContainsGenericParameters {
              get { return SR.GetResourceString("TypeContainsGenericParameters", @"Type {0} contains generic parameters"); }
        }
        internal static string TypeIsGeneric {
              get { return SR.GetResourceString("TypeIsGeneric", @"Type {0} is a generic type definition"); }
        }
        internal static string TypeMissingDefaultConstructor {
              get { return SR.GetResourceString("TypeMissingDefaultConstructor", @"Type '{0}' does not have a default constructor"); }
        }
        internal static string ListInitializerWithZeroMembers {
              get { return SR.GetResourceString("ListInitializerWithZeroMembers", @"List initializers must contain at least one initializer"); }
        }
        internal static string ElementInitializerMethodNotAdd {
              get { return SR.GetResourceString("ElementInitializerMethodNotAdd", @"Element initializer method must be named 'Add'"); }
        }
        internal static string ElementInitializerMethodNoRefOutParam {
              get { return SR.GetResourceString("ElementInitializerMethodNoRefOutParam", @"Parameter '{0}' of element initializer method '{1}' must not be a pass by reference parameter"); }
        }
        internal static string ElementInitializerMethodWithZeroArgs {
              get { return SR.GetResourceString("ElementInitializerMethodWithZeroArgs", @"Element initializer method must have at least 1 parameter"); }
        }
        internal static string ElementInitializerMethodStatic {
              get { return SR.GetResourceString("ElementInitializerMethodStatic", @"Element initializer method must be an instance method"); }
        }
        internal static string TypeNotIEnumerable {
              get { return SR.GetResourceString("TypeNotIEnumerable", @"Type '{0}' is not IEnumerable"); }
        }
        internal static string UnexpectedCoalesceOperator {
              get { return SR.GetResourceString("UnexpectedCoalesceOperator", @"Unexpected coalesce operator."); }
        }
        internal static string InvalidCast {
              get { return SR.GetResourceString("InvalidCast", @"Cannot cast from type '{0}' to type '{1}"); }
        }
        internal static string UnhandledBinary {
              get { return SR.GetResourceString("UnhandledBinary", @"Unhandled binary: {0}"); }
        }
        internal static string UnhandledBinding {
              get { return SR.GetResourceString("UnhandledBinding", @"Unhandled binding "); }
        }
        internal static string UnhandledBindingType {
              get { return SR.GetResourceString("UnhandledBindingType", @"Unhandled Binding Type: {0}"); }
        }
        internal static string UnhandledConvert {
              get { return SR.GetResourceString("UnhandledConvert", @"Unhandled convert: {0}"); }
        }
        internal static string UnhandledExpressionType {
              get { return SR.GetResourceString("UnhandledExpressionType", @"Unhandled Expression Type: {0}"); }
        }
        internal static string UnhandledUnary {
              get { return SR.GetResourceString("UnhandledUnary", @"Unhandled unary: {0}"); }
        }
        internal static string UnknownBindingType {
              get { return SR.GetResourceString("UnknownBindingType", @"Unknown binding type"); }
        }
        internal static string UserDefinedOpMustHaveConsistentTypes {
              get { return SR.GetResourceString("UserDefinedOpMustHaveConsistentTypes", @"The user-defined operator method '{1}' for operator '{0}' must have identical parameter and return types."); }
        }
        internal static string UserDefinedOpMustHaveValidReturnType {
              get { return SR.GetResourceString("UserDefinedOpMustHaveValidReturnType", @"The user-defined operator method '{1}' for operator '{0}' must return the same type as its parameter or a derived type."); }
        }
        internal static string LogicalOperatorMustHaveBooleanOperators {
              get { return SR.GetResourceString("LogicalOperatorMustHaveBooleanOperators", @"The user-defined operator method '{1}' for operator '{0}' must have associated boolean True and False operators."); }
        }
        internal static string MethodDoesNotExistOnType {
              get { return SR.GetResourceString("MethodDoesNotExistOnType", @"No method '{0}' exists on type '{1}'."); }
        }
        internal static string MethodWithArgsDoesNotExistOnType {
              get { return SR.GetResourceString("MethodWithArgsDoesNotExistOnType", @"No method '{0}' on type '{1}' is compatible with the supplied arguments."); }
        }
        internal static string GenericMethodWithArgsDoesNotExistOnType {
              get { return SR.GetResourceString("GenericMethodWithArgsDoesNotExistOnType", @"No generic method '{0}' on type '{1}' is compatible with the supplied type arguments and arguments. No type arguments should be provided if the method is non-generic. "); }
        }
        internal static string MethodWithMoreThanOneMatch {
              get { return SR.GetResourceString("MethodWithMoreThanOneMatch", @"More than one method '{0}' on type '{1}' is compatible with the supplied arguments."); }
        }
        internal static string PropertyWithMoreThanOneMatch {
              get { return SR.GetResourceString("PropertyWithMoreThanOneMatch", @"More than one property '{0}' on type '{1}' is compatible with the supplied arguments."); }
        }
        internal static string IncorrectNumberOfTypeArgsForFunc {
              get { return SR.GetResourceString("IncorrectNumberOfTypeArgsForFunc", @"An incorrect number of type args were specified for the declaration of a Func type."); }
        }
        internal static string IncorrectNumberOfTypeArgsForAction {
              get { return SR.GetResourceString("IncorrectNumberOfTypeArgsForAction", @"An incorrect number of type args were specified for the declaration of an Action type."); }
        }
        internal static string ArgumentCannotBeOfTypeVoid {
              get { return SR.GetResourceString("ArgumentCannotBeOfTypeVoid", @"Argument type cannot be System.Void."); }
        }
        internal static string InvalidOperation {
              get { return SR.GetResourceString("InvalidOperation", @"Invalid operation: '{0}'"); }
        }
        internal static string OutOfRange {
              get { return SR.GetResourceString("OutOfRange", @"{0} must be greater than or equal to {1}"); }
        }
        internal static string QueueEmpty {
              get { return SR.GetResourceString("QueueEmpty", @"Queue empty."); }
        }
        internal static string LabelTargetAlreadyDefined {
              get { return SR.GetResourceString("LabelTargetAlreadyDefined", @"Cannot redefine label '{0}' in an inner block."); }
        }
        internal static string LabelTargetUndefined {
              get { return SR.GetResourceString("LabelTargetUndefined", @"Cannot jump to undefined label '{0}'."); }
        }
        internal static string ControlCannotLeaveFinally {
              get { return SR.GetResourceString("ControlCannotLeaveFinally", @"Control cannot leave a finally block."); }
        }
        internal static string ControlCannotLeaveFilterTest {
              get { return SR.GetResourceString("ControlCannotLeaveFilterTest", @"Control cannot leave a filter test."); }
        }
        internal static string AmbiguousJump {
              get { return SR.GetResourceString("AmbiguousJump", @"Cannot jump to ambiguous label '{0}'."); }
        }
        internal static string ControlCannotEnterTry {
              get { return SR.GetResourceString("ControlCannotEnterTry", @"Control cannot enter a try block."); }
        }
        internal static string ControlCannotEnterExpression {
              get { return SR.GetResourceString("ControlCannotEnterExpression", @"Control cannot enter an expression--only statements can be jumped into."); }
        }
        internal static string NonLocalJumpWithValue {
              get { return SR.GetResourceString("NonLocalJumpWithValue", @"Cannot jump to non-local label '{0}' with a value. Only jumps to labels defined in outer blocks can pass values."); }
        }
        internal static string ExtensionNotReduced {
              get { return SR.GetResourceString("ExtensionNotReduced", @"Extension should have been reduced."); }
        }
        internal static string CannotCompileConstant {
              get { return SR.GetResourceString("CannotCompileConstant", @"CompileToMethod cannot compile constant '{0}' because it is a non-trivial value, such as a live object. Instead, create an expression tree that can construct this value."); }
        }
        internal static string CannotCompileDynamic {
              get { return SR.GetResourceString("CannotCompileDynamic", @"Dynamic expressions are not supported by CompileToMethod. Instead, create an expression tree that uses System.Runtime.CompilerServices.CallSite."); }
        }
        internal static string InvalidLvalue {
              get { return SR.GetResourceString("InvalidLvalue", @"Invalid lvalue for assignment: {0}."); }
        }
        internal static string InvalidMemberType {
              get { return SR.GetResourceString("InvalidMemberType", @"Invalid member type: {0}."); }
        }
        internal static string UnknownLiftType {
              get { return SR.GetResourceString("UnknownLiftType", @"unknown lift type: '{0}'."); }
        }
        internal static string InvalidOutputDir {
              get { return SR.GetResourceString("InvalidOutputDir", @"Invalid output directory."); }
        }
        internal static string InvalidAsmNameOrExtension {
              get { return SR.GetResourceString("InvalidAsmNameOrExtension", @"Invalid assembly name or file extension."); }
        }
        internal static string IllegalNewGenericParams {
              get { return SR.GetResourceString("IllegalNewGenericParams", @"Cannot create instance of {0} because it contains generic parameters"); }
        }
        internal static string UndefinedVariable {
              get { return SR.GetResourceString("UndefinedVariable", @"variable '{0}' of type '{1}' referenced from scope '{2}', but it is not defined"); }
        }
        internal static string CannotCloseOverByRef {
              get { return SR.GetResourceString("CannotCloseOverByRef", @"Cannot close over byref parameter '{0}' referenced in lambda '{1}'"); }
        }
        internal static string UnexpectedVarArgsCall {
              get { return SR.GetResourceString("UnexpectedVarArgsCall", @"Unexpected VarArgs call to method '{0}'"); }
        }
        internal static string RethrowRequiresCatch {
              get { return SR.GetResourceString("RethrowRequiresCatch", @"Rethrow statement is valid only inside a Catch block."); }
        }
        internal static string TryNotAllowedInFilter {
              get { return SR.GetResourceString("TryNotAllowedInFilter", @"Try expression is not allowed inside a filter body."); }
        }
        internal static string MustRewriteToSameNode {
              get { return SR.GetResourceString("MustRewriteToSameNode", @"When called from '{0}', rewriting a node of type '{1}' must return a non-null value of the same type. Alternatively, override '{2}' and change it to not visit children of this type."); }
        }
        internal static string MustRewriteChildToSameType {
              get { return SR.GetResourceString("MustRewriteChildToSameType", @"Rewriting child expression from type '{0}' to type '{1}' is not allowed, because it would change the meaning of the operation. If this is intentional, override '{2}' and change it to allow this rewrite."); }
        }
        internal static string MustRewriteWithoutMethod {
              get { return SR.GetResourceString("MustRewriteWithoutMethod", @"Rewritten expression calls operator method '{0}', but the original node had no operator method. If this is is intentional, override '{1}' and change it to allow this rewrite."); }
        }
        internal static string InvalidNullValue {
              get { return SR.GetResourceString("InvalidNullValue", @"The value null is not of type '{0}' and cannot be used in this collection."); }
        }
        internal static string InvalidObjectType {
              get { return SR.GetResourceString("InvalidObjectType", @"The value '{0}' is not of type '{1}' and cannot be used in this collection."); }
        }
        internal static string TryNotSupportedForMethodsWithRefArgs {
              get { return SR.GetResourceString("TryNotSupportedForMethodsWithRefArgs", @"TryExpression is not supported as an argument to method '{0}' because it has an argument with by-ref type. Construct the tree so the TryExpression is not nested inside of this expression."); }
        }
        internal static string TryNotSupportedForValueTypeInstances {
              get { return SR.GetResourceString("TryNotSupportedForValueTypeInstances", @"TryExpression is not supported as a child expression when accessing a member on type '{0}' because it is a value type. Construct the tree so the TryExpression is not nested inside of this expression."); }
        }
        internal static string EnumerationIsDone {
              get { return SR.GetResourceString("EnumerationIsDone", @"Enumeration has either not started or has already finished."); }
        }
        internal static string HomogenousAppDomainRequired {
              get { return SR.GetResourceString("HomogenousAppDomainRequired", @"Dynamic operations can only be performed in homogenous AppDomain."); }
        }
        internal static string TestValueTypeDoesNotMatchComparisonMethodParameter {
              get { return SR.GetResourceString("TestValueTypeDoesNotMatchComparisonMethodParameter", @"Test value of type '{0}' cannot be used for the comparison method parameter of type '{1}'"); }
        }
        internal static string SwitchValueTypeDoesNotMatchComparisonMethodParameter {
              get { return SR.GetResourceString("SwitchValueTypeDoesNotMatchComparisonMethodParameter", @"Switch value of type '{0}' cannot be used for the comparison method parameter of type '{1}'"); }
        }
        internal static string PdbGeneratorNeedsExpressionCompiler {
              get { return SR.GetResourceString("PdbGeneratorNeedsExpressionCompiler", @"DebugInfoGenerator created by CreatePdbGenerator can only be used with LambdaExpression.CompileToMethod."); }
        }
        internal static string InvalidArgumentValue {
              get { return SR.GetResourceString("InvalidArgumentValue", @"Invalid argument value"); }
        }
        internal static string NonEmptyCollectionRequired {
              get { return SR.GetResourceString("NonEmptyCollectionRequired", @"Non-empty collection required"); }
        }
        internal static string CollectionModifiedWhileEnumerating {
              get { return SR.GetResourceString("CollectionModifiedWhileEnumerating", @"Collection was modified; enumeration operation may not execute."); }
        }
        internal static string ExpressionMustBeReadable {
              get { return SR.GetResourceString("ExpressionMustBeReadable", @"Expression must be readable"); }
        }
        internal static string ExpressionTypeDoesNotMatchMethodParameter {
              get { return SR.GetResourceString("ExpressionTypeDoesNotMatchMethodParameter", @"Expression of type '{0}' cannot be used for parameter of type '{1}' of method '{2}'"); }
        }
        internal static string ExpressionTypeDoesNotMatchParameter {
              get { return SR.GetResourceString("ExpressionTypeDoesNotMatchParameter", @"Expression of type '{0}' cannot be used for parameter of type '{1}'"); }
        }
        internal static string ExpressionTypeDoesNotMatchConstructorParameter {
              get { return SR.GetResourceString("ExpressionTypeDoesNotMatchConstructorParameter", @"Expression of type '{0}' cannot be used for constructor parameter of type '{1}'"); }
        }
        internal static string IncorrectNumberOfMethodCallArguments {
              get { return SR.GetResourceString("IncorrectNumberOfMethodCallArguments", @"Incorrect number of arguments supplied for call to method '{0}'"); }
        }
        internal static string IncorrectNumberOfLambdaArguments {
              get { return SR.GetResourceString("IncorrectNumberOfLambdaArguments", @"Incorrect number of arguments supplied for lambda invocation"); }
        }
        internal static string IncorrectNumberOfConstructorArguments {
              get { return SR.GetResourceString("IncorrectNumberOfConstructorArguments", @"Incorrect number of arguments for constructor"); }
        }
        internal static string OperatorNotImplementedForType {
              get { return SR.GetResourceString("OperatorNotImplementedForType", @"The operator '{0}' is not implemented for type '{1}'"); }
        }

#endif
        internal static Type ResourceType {
              get { return typeof(FxResources.System.Linq.Expressions.SR); }
        }
    }
}
namespace FxResources.System.Linq.Expressions
{
    // The type of this class is used to create the ResourceManager instance as the type name matches the name of the embedded resources file
    internal static class SR
    {
    }
}
